package clipboard

import (
	"fmt"
	"strings"
	"testing"
	"time"

	"github.com/atotto/clipboard"
)

func TestCopyToClipboard(t *testing.T) {
	tests := []struct {
		name string
		text string
	}{
		{
			name: "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
			text: "Hello World",
		},
		{
			name: "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			text: "",
		},
		{
			name: "–ü–∞—Ä–æ–ª—å —Å —Å–∏–º–≤–æ–ª–∞–º–∏",
			text: "MySecure123!@#",
		},
		{
			name: "Unicode —Ç–µ–∫—Å—Ç",
			text: "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üîê",
		},
		{
			name: "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
			text: "This is a very long password that should still work correctly in the clipboard functionality",
		},
		{
			name: "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
			text: "!@#$%^&*()_+-=[]{}|;':\",./<>?",
		},
		{
			name: "–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
			text: "Line 1\nLine 2\nLine 3",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := CopyToClipboard(tt.text)
			if err != nil {
				t.Errorf("CopyToClipboard() –æ—à–∏–±–∫–∞ = %v", err)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω
			clipboardContent, err := clipboard.ReadAll()
			if err != nil {
				t.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: %v", err)
				return
			}

			if clipboardContent != tt.text {
				t.Errorf("CopyToClipboard() = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", clipboardContent, tt.text)
			}
		})
	}
}

func TestCopyToClipboardWithTimeout(t *testing.T) {
	tests := []struct {
		name    string
		text    string
		timeout time.Duration
		wantErr bool
	}{
		{
			name:    "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º",
			text:    "TestPassword123",
			timeout: 100 * time.Millisecond,
			wantErr: false,
		},
		{
			name:    "–ù—É–ª–µ–≤–æ–π —Ç–∞–π–º–∞—É—Ç",
			text:    "NoTimeout",
			timeout: 0,
			wantErr: false,
		},
		{
			name:    "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç",
			text:    "NegativeTimeout",
			timeout: -1 * time.Second,
			wantErr: false,
		},
		{
			name:    "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç",
			text:    "ShortTimeout",
			timeout: 1 * time.Millisecond,
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			done, err := CopyToClipboardWithTimeout(tt.text, tt.timeout)

			if (err != nil) != tt.wantErr {
				t.Errorf("CopyToClipboardWithTimeout() –æ—à–∏–±–∫–∞ = %v, –æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ %v", err, tt.wantErr)
				return
			}

			if err != nil {
				return // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–ª–∞—Å—å, –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω
			clipboardContent, err := clipboard.ReadAll()
			if err != nil {
				t.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: %v", err)
				return
			}

			if clipboardContent != tt.text {
				t.Errorf("CopyToClipboardWithTimeout() —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", clipboardContent, tt.text)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞
			if tt.timeout <= 0 {
				// –ü—Ä–∏ –Ω—É–ª–µ–≤–æ–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º —Ç–∞–π–º–∞—É—Ç–µ –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil
				if done != nil {
					t.Error("CopyToClipboardWithTimeout() —Å –Ω—É–ª–µ–≤—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil –∫–∞–Ω–∞–ª")
				}
			} else {
				// –ü—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º —Ç–∞–π–º–∞—É—Ç–µ –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
				if done == nil {
					t.Error("CopyToClipboardWithTimeout() —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–Ω–∞–ª")
					return
				}

				// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ–± –æ—á–∏—Å—Ç–∫–µ
				select {
				case cleared := <-done:
					if !cleared {
						t.Error("CopyToClipboardWithTimeout() –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å true –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")
					}
				case <-time.After(tt.timeout + 50*time.Millisecond):
					t.Error("CopyToClipboardWithTimeout() —Ç–∞–π–º–∞—É—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤–æ–≤—Ä–µ–º—è")
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω
				clearedContent, err := clipboard.ReadAll()
				if err != nil {
					t.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: %v", err)
					return
				}

				if clearedContent != "" {
					t.Errorf("CopyToClipboardWithTimeout() –±—É—Ñ–µ—Ä –Ω–µ –æ—á–∏—â–µ–Ω: %q", clearedContent)
				}
			}
		})
	}
}

func TestCopyToClipboardWithTimeoutMultiple(t *testing.T) {
	// –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
	tests := []struct {
		text    string
		timeout time.Duration
	}{
		{"First", 30 * time.Millisecond},
		{"Second", 40 * time.Millisecond},
		{"Third", 50 * time.Millisecond},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π_%d", i+1), func(t *testing.T) {
			done, err := CopyToClipboardWithTimeout(tt.text, tt.timeout)
			if err != nil {
				t.Errorf("CopyToClipboardWithTimeout() –æ—à–∏–±–∫–∞ = %v", err)
				return
			}

			if done != nil {
				select {
				case cleared := <-done:
					if !cleared {
						t.Error("–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å true –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")
					}
				case <-time.After(tt.timeout + 100*time.Millisecond):
					t.Error("–¢–∞–π–º–∞—É—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤–æ–≤—Ä–µ–º—è")
				}
			}

			// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
			time.Sleep(10 * time.Millisecond)
		})
	}
}

func TestCopyToClipboardSequential(t *testing.T) {
	// –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	values := []string{
		"First",
		"Second", 
		"Third",
		"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π",
		"üîêFifth",
	}

	for i, value := range values {
		t.Run(fmt.Sprintf("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å_%d", i+1), func(t *testing.T) {
			err := CopyToClipboard(value)
			if err != nil {
				t.Errorf("CopyToClipboard() –æ—à–∏–±–∫–∞ = %v", err)
				return
			}

			// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
			time.Sleep(10 * time.Millisecond)

			clipboardContent, err := clipboard.ReadAll()
			if err != nil {
				t.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±—É—Ñ–µ—Ä: %v", err)
				return
			}

			if clipboardContent != value {
				t.Errorf("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å %d: –ø–æ–ª—É—á–µ–Ω %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", i+1, clipboardContent, value)
			}
		})
	}
}

func TestCopyToClipboardWithTimeoutChannelClosure(t *testing.T) {
	// –¢–µ—Å—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞
	text := "ChannelTest"
	timeout := 50 * time.Millisecond

	done, err := CopyToClipboardWithTimeout(text, timeout)
	if err != nil {
		t.Fatalf("CopyToClipboardWithTimeout() –æ—à–∏–±–∫–∞ = %v", err)
	}

	if done == nil {
		t.Fatal("CopyToClipboardWithTimeout() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–Ω–∞–ª")
	}

	// –ñ–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
	select {
	case cleared, ok := <-done:
		if !ok {
			t.Error("–ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ")
			return
		}
		if !cleared {
			t.Error("–ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true")
		}
	case <-time.After(timeout + 100*time.Millisecond):
		t.Fatal("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
	select {
	case _, ok := <-done:
		if ok {
			t.Error("–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞")
		}
	case <-time.After(100 * time.Millisecond):
		t.Error("–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞")
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func BenchmarkCopyToClipboard(b *testing.B) {
	text := "BenchmarkPassword123!"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = CopyToClipboard(text)
	}
}

func BenchmarkCopyToClipboardWithTimeout(b *testing.B) {
	text := "BenchmarkPassword123!"
	timeout := 100 * time.Millisecond

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = CopyToClipboardWithTimeout(text, timeout)
	}
}

func BenchmarkCopyToClipboardLongText(b *testing.B) {
	// –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
	longText := strings.Repeat("A very long password with many characters ", 100)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = CopyToClipboard(longText)
	}
}
