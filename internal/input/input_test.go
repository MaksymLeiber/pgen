package input

import (
	"os"
	"strings"
	"testing"
)

func TestInputMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã InputMessages
	messages := &InputMessages{
		UserCanceled:  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é",
		InputCanceled: "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
	}

	if messages.UserCanceled == "" {
		t.Error("UserCanceled –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}
	if messages.InputCanceled == "" {
		t.Error("InputCanceled –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	emptyMessages := &InputMessages{}
	if emptyMessages.UserCanceled != "" {
		t.Error("–ü—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ–ª—è")
	}
}

func TestReadLine(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
		hasError bool
	}{
		{
			name:     "–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "hello world\n",
			expected: "hello world",
			hasError: false,
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ",
			input:    "  test string  \n",
			expected: "test string",
			hasError: false,
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "\n",
			expected: "",
			hasError: false,
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏",
			input:    "   \n",
			expected: "",
			hasError: false,
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π",
			input:    "\thello\t\n",
			expected: "hello",
			hasError: false,
		},
		{
			name:     "–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥",
			input:    "first line\nsecond line\n",
			expected: "first line",
			hasError: false,
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏",
			input:    "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üîë\n",
			expected: "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üîë",
			hasError: false,
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
			input:    "!@#$%^&*()_+-={}[]|\\:;\"'<>?,./\n",
			expected: "!@#$%^&*()_+-={}[]|\\:;\"'<>?,./",
			hasError: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ stdin
			oldStdin := os.Stdin
			defer func() { os.Stdin = oldStdin }()

			// –°–æ–∑–¥–∞–µ–º pipe –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
			r, w, err := os.Pipe()
			if err != nil {
				t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
			}
			defer r.Close()
			defer w.Close()

			os.Stdin = r

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ pipe
			go func() {
				defer w.Close()
				w.WriteString(tt.input)
			}()

			result, err := ReadLine()

			if tt.hasError && err == nil {
				t.Errorf("ReadLine() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ %q", tt.input)
			}
			if !tt.hasError && err != nil {
				t.Errorf("ReadLine() –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ %q, –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: %v", tt.input, err)
			}
			if result != tt.expected {
				t.Errorf("ReadLine() = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", result, tt.expected)
			}
		})
	}
}

func TestReadLineWithClosedInput(t *testing.T) {
	// –¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º –≤–≤–æ–¥–µ
	oldStdin := os.Stdin
	defer func() { os.Stdin = oldStdin }()

	// –°–æ–∑–¥–∞–µ–º pipe –∏ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º writer
	r, w, err := os.Pipe()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
	}
	defer r.Close()
	w.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º writer —Å—Ä–∞–∑—É

	os.Stdin = r

	result, err := ReadLine()
	if err == nil {
		t.Error("ReadLine() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º –≤–≤–æ–¥–µ")
	}
	if result != "" {
		t.Errorf("ReadLine() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
	}
}

func TestReadPasswordWithStarsAndMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ ReadPasswordWithStarsAndMessages
	messages := &InputMessages{
		UserCanceled:  "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
		InputCanceled: "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
	}

	// –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–ª–æ–∂–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	// –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–µ –ø–∞–Ω–∏–∫—É–µ—Ç
	t.Run("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", func(t *testing.T) {
		if messages == nil {
			t.Error("messages –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å nil")
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞
		// –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç mock'–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
		defer func() {
			if r := recover(); r != nil {
				t.Errorf("ReadPasswordWithStarsAndMessages –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å: %v", r)
			}
		}()

		// –ú—ã –Ω–µ –º–æ–∂–µ–º –ª–µ–≥–∫–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ mock'–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
		// –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
		_ = ReadPasswordWithStarsAndMessages
	})
}

func TestReadPasswordWithStarsAndMessagesNilMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å nil —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
	defer func() {
		if r := recover(); r != nil {
			t.Errorf("ReadPasswordWithStarsAndMessages –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å —Å nil messages: %v", r)
		}
	}()

	// –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å nil messages –±–µ–∑ –ø–∞–Ω–∏–∫–∏
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–µ, –Ω–æ –Ω–µ –∫ –ø–∞–Ω–∏–∫–µ
	_ = ReadPasswordWithStarsAndMessages
}

func TestInputMessagesWithDifferentLanguages(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
	tests := []struct {
		name     string
		messages *InputMessages
	}{
		{
			name: "–†—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
			messages: &InputMessages{
				UserCanceled:  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é",
				InputCanceled: "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
			},
		},
		{
			name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
			messages: &InputMessages{
				UserCanceled:  "User canceled operation",
				InputCanceled: "Input canceled",
			},
		},
		{
			name: "–°–æ–æ–±—â–µ–Ω–∏—è —Å Unicode",
			messages: &InputMessages{
				UserCanceled:  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª üö´",
				InputCanceled: "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå",
			},
		},
		{
			name: "–î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
			messages: &InputMessages{
				UserCanceled:  "–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–∂–µ–ª–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
				InputCanceled: "–ü—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑-–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–∏",
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.messages.UserCanceled == "" {
				t.Error("UserCanceled –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
			}
			if tt.messages.InputCanceled == "" {
				t.Error("InputCanceled –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
			if len(tt.messages.UserCanceled) < 3 {
				t.Error("UserCanceled —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
			}
			if len(tt.messages.InputCanceled) < 3 {
				t.Error("InputCanceled —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
			}
		})
	}
}

func TestReadLineWithLargeInput(t *testing.T) {
	// –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö
	largeInput := strings.Repeat("a", 10000) + "\n"
	expected := strings.Repeat("a", 10000)

	oldStdin := os.Stdin
	defer func() { os.Stdin = oldStdin }()

	r, w, err := os.Pipe()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
	}
	defer r.Close()
	defer w.Close()

	os.Stdin = r

	go func() {
		defer w.Close()
		w.WriteString(largeInput)
	}()

	result, err := ReadLine()
	if err != nil {
		t.Errorf("ReadLine() –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –≤–≤–æ–¥–∞: %v", err)
	}
	if result != expected {
		t.Errorf("ReadLine() –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –±–æ–ª—å—à–æ–π –≤–≤–æ–¥, –¥–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %d, –æ–∂–∏–¥–∞–µ—Ç—Å—è: %d", len(result), len(expected))
	}
}

func TestReadLineWithBinaryData(t *testing.T) {
	// –¢–µ—Å—Ç —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	binaryInput := []byte{0x00, 0x01, 0x02, 0xFF, 0xFE, 'h', 'e', 'l', 'l', 'o', '\n'}
	
	oldStdin := os.Stdin
	defer func() { os.Stdin = oldStdin }()

	r, w, err := os.Pipe()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
	}
	defer r.Close()
	defer w.Close()

	os.Stdin = r

	go func() {
		defer w.Close()
		w.Write(binaryInput)
	}()

	result, err := ReadLine()
	if err != nil {
		t.Errorf("ReadLine() –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	
	// –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–æ \n, –≤–∫–ª—é—á–∞—è –±–∏–Ω–∞—Ä–Ω—ã–µ
	expectedLength := len(binaryInput) - 1 // –º–∏–Ω—É—Å \n
	if len(result) != expectedLength {
		t.Errorf("ReadLine() –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª–∏–Ω–∞: %d, –æ–∂–∏–¥–∞–µ—Ç—Å—è: %d", len(result), expectedLength)
	}
}

func TestReadLineMultipleCalls(t *testing.T) {
	// –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ ReadLine
	inputs := []string{"first\n", "second\n", "third\n"}
	expected := []string{"first", "second", "third"}

	for i, input := range inputs {
		t.Run(strings.Join([]string{"Call", string(rune('1' + i))}, "_"), func(t *testing.T) {
			oldStdin := os.Stdin
			defer func() { os.Stdin = oldStdin }()

			r, w, err := os.Pipe()
			if err != nil {
				t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
			}
			defer r.Close()
			defer w.Close()

			os.Stdin = r

			go func() {
				defer w.Close()
				w.WriteString(input)
			}()

			result, err := ReadLine()
			if err != nil {
				t.Errorf("ReadLine() –≤—ã–∑–æ–≤ %d –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É: %v", i+1, err)
			}
			if result != expected[i] {
				t.Errorf("ReadLine() –≤—ã–∑–æ–≤ %d = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", i+1, result, expected[i])
			}
		})
	}
}

func TestReadLineWithDifferentLineEndings(t *testing.T) {
	// –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–æ–∫
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "Unix line ending (LF)",
			input:    "test\n",
			expected: "test",
		},
		{
			name:     "Windows line ending (CRLF)",
			input:    "test\r\n",
			expected: "test",
		},
		{
			name:     "String without newline (EOF expected)",
			input:    "test",
			expected: "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			oldStdin := os.Stdin
			defer func() { os.Stdin = oldStdin }()

			r, w, err := os.Pipe()
			if err != nil {
				t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
			}
			defer r.Close()
			defer w.Close()

			os.Stdin = r

			go func() {
				defer w.Close()
				w.WriteString(tt.input)
			}()

			result, err := ReadLine()
			
			// –î–ª—è —Å–ª—É—á–∞—è –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –æ–∂–∏–¥–∞–µ–º EOF –æ—à–∏–±–∫—É
			if strings.Contains(tt.name, "EOF expected") {
				if err == nil {
					t.Errorf("ReadLine() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è %s", tt.name)
				}
				return
			}
			
			if err != nil {
				t.Errorf("ReadLine() –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è %s: %v", tt.name, err)
			}
			if result != tt.expected {
				t.Errorf("ReadLine() –¥–ª—è %s = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", tt.name, result, tt.expected)
			}
		})
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func BenchmarkReadLine(b *testing.B) {
	input := "benchmark test line\n"
	
	for i := 0; i < b.N; i++ {
		b.StopTimer()
		
		oldStdin := os.Stdin
		r, w, err := os.Pipe()
		if err != nil {
			b.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
		}
		os.Stdin = r

		go func() {
			defer w.Close()
			w.WriteString(input)
		}()

		b.StartTimer()
		_, err = ReadLine()
		b.StopTimer()

		r.Close()
		os.Stdin = oldStdin

		if err != nil {
			b.Errorf("ReadLine() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %v", err)
		}
	}
}

func BenchmarkReadLineLarge(b *testing.B) {
	input := strings.Repeat("x", 1000) + "\n"
	
	for i := 0; i < b.N; i++ {
		b.StopTimer()
		
		oldStdin := os.Stdin
		r, w, err := os.Pipe()
		if err != nil {
			b.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
		}
		os.Stdin = r

		go func() {
			defer w.Close()
			w.WriteString(input)
		}()

		b.StartTimer()
		_, err = ReadLine()
		b.StopTimer()

		r.Close()
		os.Stdin = oldStdin

		if err != nil {
			b.Errorf("ReadLine() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %v", err)
		}
	}
}

func BenchmarkInputMessagesCreation(b *testing.B) {
	for i := 0; i < b.N; i++ {
		messages := &InputMessages{
			UserCanceled:  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é",
			InputCanceled: "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
		}
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
		_ = messages.UserCanceled
		_ = messages.InputCanceled
	}
}
