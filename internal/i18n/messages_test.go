package i18n

import (
	"os"
	"strings"
	"testing"
)

func TestLanguageConstants(t *testing.T) {
	// –¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç —è–∑—ã–∫–æ–≤
	if Russian != "ru" {
		t.Errorf("Russian = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è 'ru'", Russian)
	}
	if English != "en" {
		t.Errorf("English = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è 'en'", English)
	}
}

func TestGetMessagesRussian(t *testing.T) {
	// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	version := "1.0.1"
	messages := GetMessages(Russian, version)

	if messages == nil {
		t.Fatal("GetMessages(Russian) –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	tests := []struct {
		name     string
		got      string
		contains string
	}{
		{"EnterMasterPassword", messages.EnterMasterPassword, "–º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å"},
		{"EnterServiceName", messages.EnterServiceName, "—Å–µ—Ä–≤–∏—Å"},
		{"PasswordGenerated", messages.PasswordGenerated, "–ø–∞—Ä–æ–ª—å"},
		{"CopiedToClipboard", messages.CopiedToClipboard, "—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"},
		{"Version", messages.Version, version},
		{"AppTitle", messages.AppTitle, "PGen"},
		{"Description", messages.Description, "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"},
		{"Usage", messages.Usage, "pgen"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.got == "" {
				t.Errorf("GetMessages(Russian).%s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if !strings.Contains(strings.ToLower(tt.got), strings.ToLower(tt.contains)) {
				t.Errorf("GetMessages(Russian).%s = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", tt.name, tt.got, tt.contains)
			}
		})
	}
}

func TestGetMessagesEnglish(t *testing.T) {
	// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	version := "2.0.0"
	messages := GetMessages(English, version)

	if messages == nil {
		t.Fatal("GetMessages(English) –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	tests := []struct {
		name     string
		got      string
		contains string
	}{
		{"EnterMasterPassword", messages.EnterMasterPassword, "master password"},
		{"EnterServiceName", messages.EnterServiceName, "service"},
		{"PasswordGenerated", messages.PasswordGenerated, "password"},
		{"CopiedToClipboard", messages.CopiedToClipboard, "copied"},
		{"Version", messages.Version, version},
		{"AppTitle", messages.AppTitle, "PGen"},
		{"Description", messages.Description, "generating"},
		{"Usage", messages.Usage, "pgen"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.got == "" {
				t.Errorf("GetMessages(English).%s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if !strings.Contains(strings.ToLower(tt.got), strings.ToLower(tt.contains)) {
				t.Errorf("GetMessages(English).%s = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", tt.name, tt.got, tt.contains)
			}
		})
	}
}

func TestGetMessagesDefaultLanguage(t *testing.T) {
	// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
	version := "1.5.0"
	messages := GetMessages("unknown", version)

	if messages == nil {
		t.Fatal("GetMessages('unknown') –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil")
	}

	// –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if !strings.Contains(messages.EnterMasterPassword, "master password") {
		t.Errorf("GetMessages('unknown') –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ: %q", messages.EnterMasterPassword)
	}

	if !strings.Contains(messages.Version, version) {
		t.Errorf("GetMessages('unknown').Version –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Ä—Å–∏—é %q, –ø–æ–ª—É—á–µ–Ω–æ: %q", version, messages.Version)
	}
}

func TestGetMessagesVersionIntegration(t *testing.T) {
	// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
	testVersions := []string{"1.0.0", "2.5.3", "0.1.0-beta", "3.0.0-rc1"}

	for _, version := range testVersions {
		t.Run("Version_"+version, func(t *testing.T) {
			ruMessages := GetMessages(Russian, version)
			enMessages := GetMessages(English, version)

			if !strings.Contains(ruMessages.Version, version) {
				t.Errorf("–†—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Ä—Å–∏—é %q, –ø–æ–ª—É—á–µ–Ω–æ: %q", version, ruMessages.Version)
			}

			if !strings.Contains(enMessages.Version, version) {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Ä—Å–∏—é %q, –ø–æ–ª—É—á–µ–Ω–æ: %q", version, enMessages.Version)
			}
		})
	}
}

func TestPasswordStrengthMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–∏–ª–µ –ø–∞—Ä–æ–ª—è
	ruMessages := GetMessages(Russian, "1.0.0")
	enMessages := GetMessages(English, "1.0.0")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–ª–µ
	ruStrengthTests := []struct {
		name string
		msg  string
	}{
		{"PasswordStrengthWeak", ruMessages.PasswordStrengthWeak},
		{"PasswordStrengthFair", ruMessages.PasswordStrengthFair},
		{"PasswordStrengthGood", ruMessages.PasswordStrengthGood},
		{"PasswordStrengthStrong", ruMessages.PasswordStrengthStrong},
		{"PasswordStrengthVeryStrong", ruMessages.PasswordStrengthVeryStrong},
	}

	for _, tt := range ruStrengthTests {
		t.Run("Russian_"+tt.name, func(t *testing.T) {
			if tt.msg == "" {
				t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if !strings.Contains(tt.msg, "üî¥") && !strings.Contains(tt.msg, "üü†") && 
			   !strings.Contains(tt.msg, "üü°") && !strings.Contains(tt.msg, "üü¢") {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
				if len(tt.msg) < 3 {
					t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: %q", tt.name, tt.msg)
				}
			}
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–ª–µ
	enStrengthTests := []struct {
		name string
		msg  string
	}{
		{"PasswordStrengthWeak", enMessages.PasswordStrengthWeak},
		{"PasswordStrengthFair", enMessages.PasswordStrengthFair},
		{"PasswordStrengthGood", enMessages.PasswordStrengthGood},
		{"PasswordStrengthStrong", enMessages.PasswordStrengthStrong},
		{"PasswordStrengthVeryStrong", enMessages.PasswordStrengthVeryStrong},
	}

	for _, tt := range enStrengthTests {
		t.Run("English_"+tt.name, func(t *testing.T) {
			if tt.msg == "" {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if len(tt.msg) < 3 {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: %q", tt.name, tt.msg)
			}
		})
	}
}

func TestConfigurationMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	ruMessages := GetMessages(Russian, "1.0.0")
	enMessages := GetMessages(English, "1.0.0")

	configTests := []struct {
		name string
		ruMsg string
		enMsg string
	}{
		{"ConfigErrorReading", ruMessages.ConfigErrorReading, enMessages.ConfigErrorReading},
		{"ConfigErrorParsing", ruMessages.ConfigErrorParsing, enMessages.ConfigErrorParsing},
		{"ConfigErrorWriting", ruMessages.ConfigErrorWriting, enMessages.ConfigErrorWriting},
		{"ConfigShow", ruMessages.ConfigShow, enMessages.ConfigShow},
		{"ConfigSet", ruMessages.ConfigSet, enMessages.ConfigSet},
		{"ConfigReset", ruMessages.ConfigReset, enMessages.ConfigReset},
	}

	for _, tt := range configTests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.ruMsg == "" {
				t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if tt.enMsg == "" {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ (–Ω–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
			if tt.ruMsg == tt.enMsg {
				t.Errorf("–†—É—Å—Å–∫–æ–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è %s –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏: %q", tt.name, tt.ruMsg)
			}
		})
	}
}

func TestErrorMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
	ruMessages := GetMessages(Russian, "1.0.0")
	enMessages := GetMessages(English, "1.0.0")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏
	errorTests := []struct {
		name string
		ruMsg string
		enMsg string
	}{
		{"ClipboardError", ruMessages.Errors.ClipboardError, enMessages.Errors.ClipboardError},
		{"GenerationError", ruMessages.Errors.GenerationError, enMessages.Errors.GenerationError},
		{"EmptyMaster", ruMessages.Errors.EmptyMaster, enMessages.Errors.EmptyMaster},
		{"EmptyService", ruMessages.Errors.EmptyService, enMessages.Errors.EmptyService},
		{"UserCanceled", ruMessages.Errors.UserCanceled, enMessages.Errors.UserCanceled},
	}

	for _, tt := range errorTests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.ruMsg == "" {
				t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if tt.enMsg == "" {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—à–∏–±–æ–∫
	passwordIssueTests := []struct {
		name string
		ruMsg string
		enMsg string
	}{
		{"LengthTooShort", ruMessages.Errors.PasswordIssues.LengthTooShort, enMessages.Errors.PasswordIssues.LengthTooShort},
		{"NoLowercase", ruMessages.Errors.PasswordIssues.NoLowercase, enMessages.Errors.PasswordIssues.NoLowercase},
		{"NoUppercase", ruMessages.Errors.PasswordIssues.NoUppercase, enMessages.Errors.PasswordIssues.NoUppercase},
		{"NoNumbers", ruMessages.Errors.PasswordIssues.NoNumbers, enMessages.Errors.PasswordIssues.NoNumbers},
	}

	for _, tt := range passwordIssueTests {
		t.Run("PasswordIssues_"+tt.name, func(t *testing.T) {
			if tt.ruMsg == "" {
				t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –ø–∞—Ä–æ–ª—è %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if tt.enMsg == "" {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –ø–∞—Ä–æ–ª—è %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
		})
	}
}

func TestFlagsMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–ª–∞–≥–æ–≤
	ruMessages := GetMessages(Russian, "1.0.0")
	enMessages := GetMessages(English, "1.0.0")

	flagTests := []struct {
		name string
		ruMsg string
		enMsg string
	}{
		{"Lang", ruMessages.Flags.Lang, enMessages.Flags.Lang},
		{"LangDesc", ruMessages.Flags.LangDesc, enMessages.Flags.LangDesc},
		{"Length", ruMessages.Flags.Length, enMessages.Flags.Length},
		{"LengthDesc", ruMessages.Flags.LengthDesc, enMessages.Flags.LengthDesc},
		{"Copy", ruMessages.Flags.Copy, enMessages.Flags.Copy},
		{"CopyDesc", ruMessages.Flags.CopyDesc, enMessages.Flags.CopyDesc},
	}

	for _, tt := range flagTests {
		t.Run("Flags_"+tt.name, func(t *testing.T) {
			if tt.ruMsg == "" {
				t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if tt.enMsg == "" {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
		})
	}
}

func TestDetectLanguageWithFlag(t *testing.T) {
	// –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ —Ñ–ª–∞–≥—É
	tests := []struct {
		name     string
		langFlag string
		expected Language
	}{
		{"Russian_ru", "ru", Russian},
		{"Russian_russian", "russian", Russian},
		{"Russian_RU", "RU", Russian},
		{"Russian_RUSSIAN", "RUSSIAN", Russian},
		{"English_en", "en", English},
		{"English_english", "english", English},
		{"English_EN", "EN", English},
		{"English_ENGLISH", "ENGLISH", English},
		{"Unknown_de", "de", English}, // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å English
		{"Unknown_fr", "fr", English},
		{"Empty", "", English}, // –ü—É—Å—Ç–æ–π —Ñ–ª–∞–≥ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
			originalLang := os.Getenv("LANG")
			originalLCAll := os.Getenv("LC_ALL")
			originalLCMessages := os.Getenv("LC_MESSAGES")

			defer func() {
				os.Setenv("LANG", originalLang)
				os.Setenv("LC_ALL", originalLCAll)
				os.Setenv("LC_MESSAGES", originalLCMessages)
			}()

			// –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
			os.Setenv("LANG", "")
			os.Setenv("LC_ALL", "")
			os.Setenv("LC_MESSAGES", "")

			result := DetectLanguage(tt.langFlag)
			if result != tt.expected {
				t.Errorf("DetectLanguage(%q) = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", tt.langFlag, result, tt.expected)
			}
		})
	}
}

func TestDetectLanguageFromEnvironment(t *testing.T) {
	// –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	tests := []struct {
		name     string
		langEnv  string
		lcAllEnv string
		lcMsgEnv string
		expected Language
	}{
		{"LANG_ru", "ru_RU.UTF-8", "", "", Russian},
		{"LANG_russian", "russian", "", "", Russian},
		{"LANG_en", "en_US.UTF-8", "", "", English},
		{"LC_ALL_ru", "", "ru_RU.UTF-8", "", Russian},
		{"LC_MESSAGES_ru", "", "", "ru_RU.UTF-8", Russian},
		{"Multiple_ru", "", "ru_RU.UTF-8", "", Russian}, // LC_ALL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ LANG –ø—É—Å—Ç–æ–π
		{"No_ru_anywhere", "en_US.UTF-8", "de_DE.UTF-8", "fr_FR.UTF-8", English},
		{"Empty_all", "", "", "", English},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
			originalLang := os.Getenv("LANG")
			originalLCAll := os.Getenv("LC_ALL")
			originalLCMessages := os.Getenv("LC_MESSAGES")

			defer func() {
				os.Setenv("LANG", originalLang)
				os.Setenv("LC_ALL", originalLCAll)
				os.Setenv("LC_MESSAGES", originalLCMessages)
			}()

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
			os.Setenv("LANG", tt.langEnv)
			os.Setenv("LC_ALL", tt.lcAllEnv)
			os.Setenv("LC_MESSAGES", tt.lcMsgEnv)

			result := DetectLanguage("") // –ü—É—Å—Ç–æ–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
			if result != tt.expected {
				t.Errorf("DetectLanguage('') —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º LANG=%q, LC_ALL=%q, LC_MESSAGES=%q = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", 
					tt.langEnv, tt.lcAllEnv, tt.lcMsgEnv, result, tt.expected)
			}
		})
	}
}

func TestDetectLanguageFlagPriority(t *testing.T) {
	// –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ñ–ª–∞–≥–∞ –Ω–∞–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	originalLang := os.Getenv("LANG")
	defer os.Setenv("LANG", originalLang)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	os.Setenv("LANG", "ru_RU.UTF-8")

	// –§–ª–∞–≥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
	result := DetectLanguage("en")
	if result != English {
		t.Errorf("DetectLanguage('en') —Å —Ä—É—Å—Å–∫–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å English, –ø–æ–ª—É—á–µ–Ω–æ %q", result)
	}

	// –ò –Ω–∞–æ–±–æ—Ä–æ—Ç
	os.Setenv("LANG", "en_US.UTF-8")
	result = DetectLanguage("ru")
	if result != Russian {
		t.Errorf("DetectLanguage('ru') —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Russian, –ø–æ–ª—É—á–µ–Ω–æ %q", result)
	}
}

func TestInstallationMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
	ruMessages := GetMessages(Russian, "1.0.0")
	enMessages := GetMessages(English, "1.0.0")

	installTests := []struct {
		name string
		ruMsg string
		enMsg string
	}{
		{"InstallSuccess", ruMessages.InstallSuccess, enMessages.InstallSuccess},
		{"InstallError", ruMessages.InstallError, enMessages.InstallError},
		{"InstallAlreadyExists", ruMessages.InstallAlreadyExists, enMessages.InstallAlreadyExists},
		{"UninstallSuccess", ruMessages.UninstallSuccess, enMessages.UninstallSuccess},
		{"UninstallError", ruMessages.UninstallError, enMessages.UninstallError},
		{"UninstallNotInstalled", ruMessages.UninstallNotInstalled, enMessages.UninstallNotInstalled},
	}

	for _, tt := range installTests {
		t.Run("Install_"+tt.name, func(t *testing.T) {
			if tt.ruMsg == "" {
				t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if tt.enMsg == "" {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
		})
	}
}

func TestTimeMessages(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞
	ruMessages := GetMessages(Russian, "1.0.0")
	enMessages := GetMessages(English, "1.0.0")

	timeTests := []struct {
		name string
		ruMsg string
		enMsg string
	}{
		{"TimeInstantly", ruMessages.TimeInstantly, enMessages.TimeInstantly},
		{"TimeSeconds", ruMessages.TimeSeconds, enMessages.TimeSeconds},
		{"TimeMinutes", ruMessages.TimeMinutes, enMessages.TimeMinutes},
		{"TimeHours", ruMessages.TimeHours, enMessages.TimeHours},
		{"TimeDays", ruMessages.TimeDays, enMessages.TimeDays},
		{"TimeYears", ruMessages.TimeYears, enMessages.TimeYears},
	}

	for _, tt := range timeTests {
		t.Run("Time_"+tt.name, func(t *testing.T) {
			if tt.ruMsg == "" {
				t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}
			if tt.enMsg == "" {
				t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ %s –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º", tt.name)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–µ–ª
			if strings.Contains(tt.name, "Seconds") || strings.Contains(tt.name, "Minutes") || 
			   strings.Contains(tt.name, "Hours") || strings.Contains(tt.name, "Days") || 
			   strings.Contains(tt.name, "Years") {
				if !strings.Contains(tt.ruMsg, "%.0f") {
					t.Errorf("–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ %s –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ %%.0f, –ø–æ–ª—É—á–µ–Ω–æ: %q", tt.name, tt.ruMsg)
				}
				if !strings.Contains(tt.enMsg, "%.0f") {
					t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ %s –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ %%.0f, –ø–æ–ª—É—á–µ–Ω–æ: %q", tt.name, tt.enMsg)
				}
			}
		})
	}
}

func TestMessageConsistency(t *testing.T) {
	// –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏
	ruMessages := GetMessages(Russian, "1.0.0")
	enMessages := GetMessages(English, "1.0.0")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö
	if ruMessages.EnterMasterPassword == "" || enMessages.EnterMasterPassword == "" {
		t.Error("EnterMasterPassword –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö")
	}

	if ruMessages.AppTitle == "" || enMessages.AppTitle == "" {
		t.Error("AppTitle –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö")
	}

	if ruMessages.Examples == "" || enMessages.Examples == "" {
		t.Error("Examples –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–ª–∞–≥–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
	if ruMessages.Flags.Lang == "" || enMessages.Flags.Lang == "" {
		t.Error("Flags.Lang –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—à–∏–±–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
	if ruMessages.Errors.EmptyMaster == "" || enMessages.Errors.EmptyMaster == "" {
		t.Error("Errors.EmptyMaster –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö")
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func BenchmarkGetMessagesRussian(b *testing.B) {
	version := "1.0.0"
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = GetMessages(Russian, version)
	}
}

func BenchmarkGetMessagesEnglish(b *testing.B) {
	version := "1.0.0"
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = GetMessages(English, version)
	}
}

func BenchmarkDetectLanguage(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = DetectLanguage("ru")
	}
}

func BenchmarkDetectLanguageFromEnv(b *testing.B) {
	os.Setenv("LANG", "ru_RU.UTF-8")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = DetectLanguage("")
	}
}

func TestGetRandomTip(t *testing.T) {
	// –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ GetRandomTip
	ruMessages := GetMessages(Russian, "1.0.1")
	enMessages := GetMessages(English, "1.0.1")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
	ruTip := ruMessages.GetRandomTip()
	if ruTip == "" {
		t.Error("GetRandomTip() –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
	}

	enTip := enMessages.GetRandomTip()
	if enTip == "" {
		t.Error("GetRandomTip() –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–æ–≤–µ—Ç (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å emoji –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
	if !strings.Contains(ruTip, "üí°") && !strings.Contains(strings.ToLower(ruTip), "—Å–æ–≤–µ—Ç") {
		t.Errorf("–†—É—Å—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å emoji –∏–ª–∏ —Å–ª–æ–≤–æ '—Å–æ–≤–µ—Ç': %q", ruTip)
	}

	if !strings.Contains(enTip, "üí°") && !strings.Contains(strings.ToLower(enTip), "tip") {
		t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å emoji –∏–ª–∏ —Å–ª–æ–≤–æ 'tip': %q", enTip)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–º –≤—ã–∑–æ–≤–µ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Ä–∞–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
	// (—Ö–æ—Ç—è –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ seed –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
	tips := make(map[string]bool)
	for i := 0; i < 50; i++ {
		tip := ruMessages.GetRandomTip()
		tips[tip] = true
	}

	// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ (–ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ø—ã—Ç–æ–∫)
	if len(tips) < 2 && len(ruMessages.Tips) > 1 {
		t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω —Ç–æ–ª—å–∫–æ %d —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ %d –ø–æ–ø—ã—Ç–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)", len(tips), 50)
	}
}

func TestTipsArrays(t *testing.T) {
	// –¢–µ—Å—Ç –º–∞—Å—Å–∏–≤–æ–≤ —Å–æ–≤–µ—Ç–æ–≤
	ruMessages := GetMessages(Russian, "1.0.1")
	enMessages := GetMessages(English, "1.0.1")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤—ã Tips –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
	if len(ruMessages.Tips) == 0 {
		t.Error("–ú–∞—Å—Å–∏–≤ Tips –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	if len(enMessages.Tips) == 0 {
		t.Error("–ú–∞—Å—Å–∏–≤ Tips –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö
	if len(ruMessages.Tips) != len(enMessages.Tips) {
		t.Errorf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ: —Ä—É—Å—Å–∫–∏–π=%d, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π=%d", 
			len(ruMessages.Tips), len(enMessages.Tips))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–≤–µ—Ç—ã –Ω–µ–ø—É—Å—Ç—ã–µ
	for i, tip := range ruMessages.Tips {
		if tip == "" {
			t.Errorf("–†—É—Å—Å–∫–∏–π —Å–æ–≤–µ—Ç #%d –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º", i)
		}
		if !strings.Contains(tip, "üí°") && !strings.Contains(strings.ToLower(tip), "—Å–æ–≤–µ—Ç") {
			t.Errorf("–†—É—Å—Å–∫–∏–π —Å–æ–≤–µ—Ç #%d –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å emoji –∏–ª–∏ —Å–ª–æ–≤–æ '—Å–æ–≤–µ—Ç': %q", i, tip)
		}
	}

	for i, tip := range enMessages.Tips {
		if tip == "" {
			t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–æ–≤–µ—Ç #%d –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º", i)
		}
		if !strings.Contains(tip, "üí°") && !strings.Contains(strings.ToLower(tip), "tip") {
			t.Errorf("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–æ–≤–µ—Ç #%d –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å emoji –∏–ª–∏ —Å–ª–æ–≤–æ 'tip': %q", i, tip)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ —Å–æ–≤–µ—Ç–∞—Ö (–Ω–µ –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
	uniqueRuTips := make(map[string]bool)
	for _, tip := range ruMessages.Tips {
		uniqueRuTips[tip] = true
	}

	uniqueEnTips := make(map[string]bool)
	for _, tip := range enMessages.Tips {
		uniqueEnTips[tip] = true
	}

	if len(uniqueRuTips) != len(ruMessages.Tips) {
		t.Errorf("–ï—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä—É—Å—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã: —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö=%d, –≤—Å–µ–≥–æ=%d", 
			len(uniqueRuTips), len(ruMessages.Tips))
	}

	if len(uniqueEnTips) != len(enMessages.Tips) {
		t.Errorf("–ï—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã: —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö=%d, –≤—Å–µ–≥–æ=%d", 
			len(uniqueEnTips), len(enMessages.Tips))
	}
}

func TestGetRandomTipFallback(t *testing.T) {
	// –¢–µ—Å—Ç fallback –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ–≤–µ—Ç—É –µ—Å–ª–∏ Tips –ø—É—Å—Ç–æ–π
	messages := &Messages{
		Tip: "Fallback —Å–æ–≤–µ—Ç",
		Tips: []string{}, // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
	}

	tip := messages.GetRandomTip()
	if tip != "Fallback —Å–æ–≤–µ—Ç" {
		t.Errorf("GetRandomTip() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å fallback —Å–æ–≤–µ—Ç –∫–æ–≥–¥–∞ Tips –ø—É—Å—Ç–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: %q", tip)
	}
}
