package colors

import (
	"fmt"
	"regexp"
	"strings"
	"testing"

	"github.com/fatih/color"
)

func TestColorVariables(t *testing.T) {
	// –¢–µ—Å—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	tests := []struct {
		name     string
		colorVar *color.Color
	}{
		{"Success", Success},
		{"Error", Error},
		{"Info", Info},
		{"Prompt", Prompt},
		{"Generated", Generated},
		{"Title", Title},
		{"Subtle", Subtle},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.colorVar == nil {
				t.Errorf("–¶–≤–µ—Ç–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è %s –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil", tt.name)
			}
		})
	}
}

func TestSuccessMsg(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			input:    "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
			expected: "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏",
			input:    "–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: MyPass123!",
			expected: "–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: MyPass123!",
		},
		{
			name:     "Unicode —Å–æ–æ–±—â–µ–Ω–∏–µ",
			input:    "–£—Å–ø–µ—Ö! ‚úÖ –ì–æ—Ç–æ–≤–æ",
			expected: "–£—Å–ø–µ—Ö! ‚úÖ –ì–æ—Ç–æ–≤–æ",
		},
		{
			name:     "–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			input:    "–°—Ç—Ä–æ–∫–∞ 1\n–°—Ç—Ä–æ–∫–∞ 2",
			expected: "–°—Ç—Ä–æ–∫–∞ 1\n–°—Ç—Ä–æ–∫–∞ 2",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := SuccessMsg(tt.input)
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
			if !strings.Contains(result, tt.expected) {
				t.Errorf("SuccessMsg() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", result, tt.expected)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ANSI –∫–æ–¥—ã –¥–ª—è —Ü–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫)
			if tt.input != "" && !containsANSICodes(result) {
				t.Errorf("SuccessMsg() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
			}
		})
	}
}

func TestErrorMsg(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
			input:    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
			expected: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
			input:    "Error: file not found",
			expected: "Error: file not found",
		},
		{
			name:     "–û—à–∏–±–∫–∞ —Å —ç–º–æ–¥–∑–∏",
			input:    "–û—à–∏–±–∫–∞! ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å",
			expected: "–û—à–∏–±–∫–∞! ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := ErrorMsg(tt.input)
			
			if !strings.Contains(result, tt.expected) {
				t.Errorf("ErrorMsg() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", result, tt.expected)
			}

			if tt.input != "" && !containsANSICodes(result) {
				t.Errorf("ErrorMsg() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
			}
		})
	}
}

func TestInfoMsg(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			input:    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
			expected: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–ü–æ–¥—Å–∫–∞–∑–∫–∞",
			input:    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
			expected: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := InfoMsg(tt.input)
			
			if !strings.Contains(result, tt.expected) {
				t.Errorf("InfoMsg() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", result, tt.expected)
			}

			if tt.input != "" && !containsANSICodes(result) {
				t.Errorf("InfoMsg() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
			}
		})
	}
}

func TestPromptMsg(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞",
			input:    "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:",
			expected: "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
			input:    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n)",
			expected: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n)",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := PromptMsg(tt.input)
			
			if !strings.Contains(result, tt.expected) {
				t.Errorf("PromptMsg() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", result, tt.expected)
			}

			if tt.input != "" && !containsANSICodes(result) {
				t.Errorf("PromptMsg() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
			}
		})
	}
}

func TestGeneratedMsg(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å",
			input:    "MySecurePass123!",
			expected: "MySecurePass123!",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–î–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å",
			input:    "VeryLongGeneratedPasswordWith123!@#$%",
			expected: "VeryLongGeneratedPasswordWith123!@#$%",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := GeneratedMsg(tt.input)
			
			if !strings.Contains(result, tt.expected) {
				t.Errorf("GeneratedMsg() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", result, tt.expected)
			}

			if tt.input != "" && !containsANSICodes(result) {
				t.Errorf("GeneratedMsg() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
			}
		})
	}
}

func TestTitleMsg(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
			input:    "PGen - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π",
			expected: "PGen - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞",
			input:    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
			expected: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := TitleMsg(tt.input)
			
			if !strings.Contains(result, tt.expected) {
				t.Errorf("TitleMsg() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", result, tt.expected)
			}

			if tt.input != "" && !containsANSICodes(result) {
				t.Errorf("TitleMsg() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
			}
		})
	}
}

func TestSubtleMsg(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–¢–æ–Ω–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			input:    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
			expected: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–ü–æ–¥–ø–∏—Å—å",
			input:    "–í–µ—Ä—Å–∏—è 1.0.0",
			expected: "–í–µ—Ä—Å–∏—è 1.0.0",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := SubtleMsg(tt.input)
			
			if !strings.Contains(result, tt.expected) {
				t.Errorf("SubtleMsg() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", result, tt.expected)
			}

			if tt.input != "" && !containsANSICodes(result) {
				t.Errorf("SubtleMsg() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", result)
			}
		})
	}
}

func TestColorFunctionsWithSpecialCharacters(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	// –¢–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –æ—Å–æ–±—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
	specialChars := []string{
		"!@#$%^&*()",
		"–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: ‚Ññ;%:?*",
		"Unicode: üîêüõ°Ô∏è‚ö°üöÄ",
		"Tabs\tand\nnewlines",
		"\"Quotes\" and 'apostrophes'",
		"<HTML> & XML tags",
		"JSON: {\"key\": \"value\"}",
	}

	functions := map[string]func(string) string{
		"SuccessMsg":   SuccessMsg,
		"ErrorMsg":     ErrorMsg,
		"InfoMsg":      InfoMsg,
		"PromptMsg":    PromptMsg,
		"GeneratedMsg": GeneratedMsg,
		"TitleMsg":     TitleMsg,
		"SubtleMsg":    SubtleMsg,
	}

	for funcName, fn := range functions {
		for i, input := range specialChars {
			t.Run(fmt.Sprintf("%s_SpecialChar_%d", funcName, i+1), func(t *testing.T) {
				result := fn(input)
				
				if !strings.Contains(result, input) {
					t.Errorf("%s() = %q, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å %q", funcName, result, input)
				}

				if !containsANSICodes(result) {
					t.Errorf("%s() –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–∞", funcName)
				}
			})
		}
	}
}

func TestColorDisabled(t *testing.T) {
	// –¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()

	// –û—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞
	color.NoColor = true

	testInput := "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	
	functions := map[string]func(string) string{
		"SuccessMsg":   SuccessMsg,
		"ErrorMsg":     ErrorMsg,
		"InfoMsg":      InfoMsg,
		"PromptMsg":    PromptMsg,
		"GeneratedMsg": GeneratedMsg,
		"TitleMsg":     TitleMsg,
		"SubtleMsg":    SubtleMsg,
	}

	for funcName, fn := range functions {
		t.Run(fmt.Sprintf("%s_NoColor", funcName), func(t *testing.T) {
			result := fn(testInput)
			
			// –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
			if result != testInput {
				t.Errorf("%s() —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ = %q, –æ–∂–∏–¥–∞–µ—Ç—Å—è %q", funcName, result, testInput)
			}

			// –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ANSI –∫–æ–¥–æ–≤
			if containsANSICodes(result) {
				t.Errorf("%s() —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ANSI –∫–æ–¥—ã: %q", funcName, result)
			}
		})
	}
}

func TestAllFunctionsConsistency(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	originalValue := color.NoColor
	defer func() {
		color.NoColor = originalValue
	}()
	color.NoColor = false

	// –¢–µ—Å—Ç –Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
	testInput := "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å"
	
	functions := []func(string) string{
		SuccessMsg,
		ErrorMsg,
		InfoMsg,
		PromptMsg,
		GeneratedMsg,
		TitleMsg,
		SubtleMsg,
	}

	for i, fn := range functions {
		t.Run(fmt.Sprintf("Function_%d_Consistency", i+1), func(t *testing.T) {
			result := fn(testInput)
			
			// –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
			if !strings.Contains(result, testInput) {
				t.Errorf("–§—É–Ω–∫—Ü–∏—è %d –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç", i+1)
			}

			// –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞
			if len(result) == 0 {
				t.Errorf("–§—É–Ω–∫—Ü–∏—è %d –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞", i+1)
			}

			// –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–∏–∑-–∑–∞ ANSI –∫–æ–¥–æ–≤)
			if len(result) <= len(testInput) {
				t.Errorf("–§—É–Ω–∫—Ü–∏—è %d: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏", i+1)
			}
		})
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è ANSI –∫–æ–¥–æ–≤
func containsANSICodes(s string) bool {
	// ANSI –∫–æ–¥—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å ESC[ (–∏–ª–∏ \x1b[)
	ansiRegex := regexp.MustCompile(`\x1b\[[0-9;]*m`)
	return ansiRegex.MatchString(s)
}

// –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func BenchmarkSuccessMsg(b *testing.B) {
	msg := "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = SuccessMsg(msg)
	}
}

func BenchmarkErrorMsg(b *testing.B) {
	msg := "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = ErrorMsg(msg)
	}
}

func BenchmarkAllColorFunctions(b *testing.B) {
	msg := "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞"
	
	functions := []func(string) string{
		SuccessMsg,
		ErrorMsg,
		InfoMsg,
		PromptMsg,
		GeneratedMsg,
		TitleMsg,
		SubtleMsg,
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for _, fn := range functions {
			_ = fn(msg)
		}
	}
}

func BenchmarkLongMessage(b *testing.B) {
	longMsg := strings.Repeat("–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ ", 100)
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = SuccessMsg(longMsg)
	}
}
